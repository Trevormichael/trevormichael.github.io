---
import "@fontsource-variable/inter";
import { ViewTransitions } from "astro:transitions";
import Nav from "./Nav.astro";

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<script>
	const noise = document.querySelector('.noise') as HTMLElement;

	document.addEventListener('mousemove', (e) => {
		const x = 1 - e.clientX / window.innerWidth;
		const y = 1 - e.clientY / window.innerHeight;

		const depth = parseFloat(noise.dataset.depth ?? "") || 0.5; // Adjust depth as needed

		const parallaxStrength = 0;
    	const translateX = (x - 0.5) * depth * parallaxStrength; // Adjust 100 for desired strength
    	const translateY = (y - 0.5) * depth * parallaxStrength;

		noise.style.transform = `translate(${translateX}px, ${translateY}px)`;
		
		const max = 70
		const min = 30
		const xPercentage = min + (x * (max - min)); // Maps 0-1 to 40%-60%
		const yPercentage = min + (y * (max - min)); // Maps 0-1 to 40%-60%
		
		noise.style.setProperty('--gradient-x', `${xPercentage}%`);
		noise.style.setProperty('--gradient-y', `${yPercentage}%`);

		const rMax = 220
		const rMin = 200
		const rot = rMin + (y * (rMax - rMin));

		noise.style.setProperty('--gradient-rot', `${rot}deg`)
	});
</script>

<html lang="en" transition:animate="fade">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>
		<Nav />
		<div class="content">
			<slot />
		</div>
		<div class="noise" transition:persist></div>
	</body><style is:global>
		:root {
			--surface: rgb(45, 45, 49);
			--accent: 136, 58, 234;
			--accent-light: 224, 204, 250;
			--accent-dark: 49, 10, 101;
			--accent-gradient: linear-gradient(
				45deg,
				rgb(var(--accent)),
				rgb(var(--accent-light)) 30%,
				white 60%
			);
		}
		html {
			background-color: #1d2640;
			color: rgb(244, 244, 240);
			font-family: "Inter Variable";
			font-weight: 300;
		}
		body {
			padding: 1em;
			display: flex;
			flex-direction: row;
		}
		@media (max-width: 768px) {
  			body {
    			flex-direction: column; /* Stack vertically on smaller screens */
  			}
			.content {
				margin-top: 32px;
			}
		}
		.content {
			flex-grow: 1;
			flex-shrink: 1;
			min-width: 300px;
			padding-right: 18px;
		}
		.noise {
			position: fixed;
			left: -4vw;
			top: -4vh;
			background: linear-gradient(
					var(--gradient-rot),
					rgba(1, 23, 79, 0.4),
					transparent
				),
				linear-gradient(120deg, rgba(174, 7, 143, 0.2), transparent),
				radial-gradient(at var(--gradient-x) var(--gradient-y), rgba(69, 119, 0, 0.2), rgba(0 0 200 / 10%)),
				url("/noise.svg");
			filter: contrast(400%) brightness(30%);
			width: 108vw;
			height: 108vh;
			background-size: cover;
			background-attachment: fixed;
			background-position: center;
			z-index: -1;
			--gradient-x: 50%;
  			--gradient-y: 50%;
			--gradient-rot: 200deg;
		}
	</style>
</html>
