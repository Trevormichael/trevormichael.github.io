---
const pathname = new URL(Astro.request.url).pathname;
const current = pathname.slice(1); // remove the first "/"

const navItems = [
  { name: "About", path: "about" },
  { name: "Skills", path: "skills" },
  { name: "Experience", path: "experience" },
  { name: "Projects", path: "projects" }
];

const links = [
    { url: "", svg: "./github.svg", class: "scale-[0.8] group-hover:scale-[1.0]" },
    { url: "", svg: "./discord.svg", class: "scale-[1.0] group-hover:scale-[1.2]" },
    { url: "", svg: "./envelope.svg", class: "scale-[0.8] group-hover:scale-[1.0]" }
]
const { requireInfo } = Astro.props;
---

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const sections = document.querySelectorAll('h1[id]');
        const navLinks = document.querySelectorAll('.toc-link');

        const observerOptions = {
            rootMargin: '200% 0px -90% 0px',
            threshold: 0.1
        };

        const observerCallback = (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    navLinks.forEach(link => {
                        let href = link.getAttribute('href')
                        if (href && href.slice(1) === entry.target.id) {
                            link.classList.add('active');
                        } else {
                            link.classList.remove('active');
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(observerCallback, observerOptions);

        sections.forEach(section => {
            observer.observe(section);
        });
    });
</script>

<header class="pr-24 mb-8 md:mb-0 md:w-1/3 md:min-w-1/3 md:sticky md:top-0">
    <h1 class="text-xl text-nowrap font-bold text-stone-700"><a href="/">Trevor Michael C.</a></h1>
    <p>Developer, Designer</p>
    <p class:list={[requireInfo ? "" : "hidden md:block"]}></p>
    <nav>
        <ul class="mt-8 font-light hidden md:block" role="list">
            {navItems.map((item) => (
                <a class:list={["toc-link block group text-stone-700 text-md", current === item.path ? "" : ""]} href={`#${item.path}`}>
                    <li class="transition-all inline-block text-nowrap font-normal group-[.active]:font-bold group-[.active]:shadow-xl group-[.active]:pl-4 pr-4 list-none py-1.5 my-1 hover:font-bold rounded-full items-center">
                        {item.name}
                    </li>
                </a>
            ))}
        </ul>
    </nav>
    <ul class="flex flex-row align-center my-4 gap-4" aria-label="Contact Links">
        {
            links.map(l => (
                <li class="w-6 h-6 group content-center opacity-80">
                    <a class="" href={l.url}>
                        <img class={`${l.class} transition-all`} src={l.svg}/>
                    </a>
                </li>
            ))
        }
    </ul>
</header>